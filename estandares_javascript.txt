Estándares de programación utilizados del lado del cliente (JavaScript)

Justificación:
El presente documento fue creado con el objetivo de describir los estandares de programación utilizados para JavaScript
que se aplicaron al proyecto de SGE, hecho por los desarrolladores: 
-Fernando alonso Moreno Flores.


Introducción:
Los estándares de programación en JavaScript son pautas y convenciones que los desarrolladores 
siguen para escribir código de manera consistente, legible y mantenible. 
A continuación, se detallan los estándares de programación utilizados en el código proporcionado.

-----------------------------------------------------------------------------------------------------------------------------

1. Nomenclatura de Variables y Funciones:
-Nombres Descriptivos: Se utilizan nombres descriptivos en mayúsculas con guiones bajos para las constantes y variables
y en camelCase para las funciones.

Ejemplo:
let SAVE_MODAL;
let SAVE_FORM, ID_ESTUDIANTE, nombre_estudiante;
const ESTUDIANTE_API = 'services/admin/estudiante.php';

-Nombres Significativos: Los nombres de variables y funciones indican claramente su propósito.

Ejemplo:
async function loadComponent(path) {
    const response = await fetch(path);
    const text = await response.text();
    return text;
}
const openCreate = () => {
    SAVE_MODAL.show();
    MODAL_TITLE.textContent = 'Crear estudiante';
}

-----------------------------------------------------------------------------------------------------------------------------

2.Indentación:
La indentación en programación se refiere al espacio en blanco que se inserta al comienzo de una línea de código. 
Este espacio en blanco ayuda a estructurar el código de manera visual, haciendo que la jerarquía y el flujo del código
sean más claros y fáciles de seguir.

-Consistente: Se usa una indentación consistente de 4 espacios por nivel para mejorar la legibilidad del código.
Ejemplo: 
const openCreate = () => {
    SAVE_MODAL.show();
    MODAL_TITLE.textContent = 'Crear estudiante';
    SAVE_FORM.reset();
}

-----------------------------------------------------------------------------------------------------------------------------

3.Punto y Coma:
-Inclusión de Puntos y Comas: Se incluyen puntos y comas al final de las líneas para evitar problemas potenciales.
Ejemplo:
const ESTUDIANTE_API = 'services/admin/estudiante.php';
const GRADO_API = 'services/admin/grado.php';

-----------------------------------------------------------------------------------------------------------------------------

4.Declaración de Variables:
-Const y Let: Se utiliza const para declarar variables cuyo valor no cambiará y let para aquellas que pueden cambiar. 
Se evita el uso de var.
Ejemplo:
const ESTUDIANTE_API = 'services/admin/estudiante.php';
let SAVE_MODAL;

-----------------------------------------------------------------------------------------------------------------------------

5. Evitar el Uso de Variables Globales:
-Encapsulación: Se minimiza el uso de variables globales para prevenir colisiones de nombres y mantener la encapsulación.

-----------------------------------------------------------------------------------------------------------------------------

6. Evitar la Escritura en Línea:
-Legibilidad: Se evita escribir múltiples declaraciones en una sola línea para mejorar la legibilidad del código.
Ejemplo:
if (form) {
    action = 'searchRows';
} else {
    action = 'readAll';
}

-----------------------------------------------------------------------------------------------------------------------------

7.Manejo de Errores:
-Uso de try catch: Se utilizan bloques try catch para manejar errores de manera adecuada y proporcionar mensajes significativos.
Ejemplo:
const openUpdate = async (id) => {
    try {
        const FORM = new FormData();
        FORM.append('idEstudiante', id);
        const DATA = await fetchData(ESTUDIANTE_API, 'readOne', FORM);
        if (DATA.status) {
            SAVE_MODAL.show();
        } else {
            sweetAlert(2, DATA.error, false);
        }
    } catch (Error) {
        console.log(Error);
        SAVE_MODAL.show();
    }
}

Conclusión:
Estos estándares ayudan a mantener un código claro, legible y fácil de mantener, 
asegurando una colaboración más eficiente entre desarrolladores y facilitando la detección y 
corrección de errores.